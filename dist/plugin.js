async function p(o){if(o.valuesByMode&&typeof o.valuesByMode=="object"){const i=Object.keys(o.valuesByMode);for(const t of i){const e=o.valuesByMode[t];if(e&&typeof e=="object"&&"type"in e&&e.type==="VARIABLE_ALIAS"&&e.id){const a=await figma.variables.getVariableByIdAsync(e.id);if(a){const s=await m(a);if(s!==void 0)return s}}else if(o.resolvedType==="COLOR"&&typeof e=="object"&&"r"in e){const a={r:e.r,g:e.g,b:e.b};return"a"in e&&(a.a=e.a),a}else if(o.resolvedType==="FLOAT"&&typeof e=="number")return e}}return null}async function m(o){return p(o)}function h(o,i,t){return new Promise((e,a)=>{const r=o.flatMap(f=>f.variables).filter(f=>f.scopes&&f.scopes.length>0);let n=0;const l=[];function y(){const f=r.slice(n,n+i);Promise.all(f.map(async c=>{const g=await p(c);l.push({alias:c.name||"No alias",id:c.id,value:g,type:c.resolvedType==="COLOR"?"color":"number",isRemote:c.remote,libraryName:o.find(d=>d.variables.includes(c)).libraryName,scopes:c.scopes||[],collectionName:o.find(d=>d.variables.includes(c)).collectionName})})).then(()=>{n+=i,n<r.length?setTimeout(y,0):(t(l),e())}).catch(a)}y()})}async function V(){try{const o=await figma.teamLibrary.getAvailableLibraryVariableCollectionsAsync();for(const i of o){const t=await figma.teamLibrary.getVariablesInLibraryCollectionAsync(i.key);for(const e of t)(e.resolvedType==="COLOR"||e.resolvedType==="FLOAT")&&await figma.variables.importVariableByKeyAsync(e.key)}figma.notify("âœ… Variables imported correctly.")}catch(o){console.error("Error when importing remote variables:",o),figma.notify("ðŸš¨ Error when importing remote variables.")}}async function u(){try{figma.ui.postMessage({type:"loading-start"}),await V();const o=await figma.variables.getLocalVariableCollectionsAsync(),i=[];for(const s of o){const r=[];for(const n of s.variableIds){const l=await figma.variables.getVariableByIdAsync(n);((l==null?void 0:l.resolvedType)==="COLOR"||(l==null?void 0:l.resolvedType)==="FLOAT")&&r.push(l)}i.push({variables:r,libraryName:"Local",collectionName:s.name})}const t=await figma.teamLibrary.getAvailableLibraryVariableCollectionsAsync(),e=[];for(const s of t){const r=await figma.teamLibrary.getVariablesInLibraryCollectionAsync(s.key),n={variables:[],libraryName:s.libraryName,collectionName:s.name};for(const l of r)if(l.resolvedType==="COLOR"||l.resolvedType==="FLOAT"){const y=await figma.variables.importVariableByKeyAsync(l.key);n.variables.push(y)}e.push(n)}const a=[...i,...e];await h(a,50,async s=>{figma.ui.postMessage({type:"all-data",variables:s})})}catch(o){console.error("Error loading all variables :",o),figma.notify("ðŸš¨ Error loading all variables.")}finally{figma.ui.postMessage({type:"loading-end"})}}async function b(o,i,t){const{scopes:e}=o;if(e.includes("ALL_SCOPES"))return!0;if(o.resolvedType==="COLOR"){if(i==="fill"&&"fills"in t)return e.includes("ALL_FILLS")||e.includes("FRAME_FILL")&&t.type==="FRAME"||e.includes("SHAPE_FILL")&&["RECTANGLE","ELLIPSE","POLYGON","STAR"].includes(t.type)?!0:e.includes("TEXT_FILL")&&t.type==="TEXT";if(i==="stroke"&&"strokes"in t)return e.includes("STROKE_COLOR")}else if(o.resolvedType==="FLOAT"){if(i==="spaceBetween"&&t.type==="FRAME")return e.includes("GAP");if(i==="borderRadius"&&"cornerRadius"in t)return e.includes("CORNER_RADIUS");if(i==="padding"&&t.type==="FRAME")return e.includes("GAP");if(i==="strokeWidth"&&"strokeWeight"in t)return e.includes("STROKE_FLOAT")}return!1}async function L(o,i,t){if(o.length>0&&i)try{let e=!1;for(const a of o)if(await b(i,t,a)){if(t==="fill"&&"fills"in a)if(e=!0,Array.isArray(a.fills)&&a.fills.length>0){const r=[...a.fills];r[0]=figma.variables.setBoundVariableForPaint(r[0],"color",i),a.fills=r}else a.fills=[figma.variables.setBoundVariableForPaint({type:"SOLID",color:{r:0,g:0,b:0},opacity:1,visible:!0,blendMode:"NORMAL"},"color",i)];else if(t==="stroke"&&"strokes"in a)if(e=!0,Array.isArray(a.strokes)&&a.strokes.length>0){const r=[...a.strokes];r[0]=figma.variables.setBoundVariableForPaint(r[0],"color",i),a.strokes=r}else a.strokes=[figma.variables.setBoundVariableForPaint({type:"SOLID",color:{r:0,g:0,b:0},opacity:1,visible:!0,blendMode:"NORMAL"},"color",i)]}e?figma.notify("âœ… Variable applied correctly."):figma.notify("ðŸš« Scope limitation.")}catch(e){console.error("Error when applying the variable:",e),figma.notify("ðŸš¨ It was not possible to apply the variable.")}else figma.notify("ðŸ˜º Oops! There is nothing selected.")}async function A(o,i,t){let e=!1;for(const a of o)await b(i,t,a)&&("setBoundVariable"in a?(e=!0,t==="spaceBetween"&&a.type==="FRAME"?a.setBoundVariable("itemSpacing",i):t==="borderRadius"&&"cornerRadius"in a?(a.setBoundVariable("topLeftRadius",i),a.setBoundVariable("topRightRadius",i),a.setBoundVariable("bottomLeftRadius",i),a.setBoundVariable("bottomRightRadius",i)):t==="paddingVertical"&&a.type==="FRAME"?(a.setBoundVariable("paddingTop",i),a.setBoundVariable("paddingBottom",i)):t==="paddingHorizontal"&&a.type==="FRAME"?(a.setBoundVariable("paddingLeft",i),a.setBoundVariable("paddingRight",i)):t==="paddingGeneral"&&a.type==="FRAME"?(a.setBoundVariable("paddingTop",i),a.setBoundVariable("paddingBottom",i),a.setBoundVariable("paddingLeft",i),a.setBoundVariable("paddingRight",i)):t==="strokeWidth"&&"strokeWeight"in a&&a.setBoundVariable("strokeWeight",i)):console.warn("Node does not support variable binding."));e?figma.notify("âœ… Variable applied correctly."):figma.notify("ðŸš« Scope limitation.")}figma.showUI(__html__,{width:240,height:664});async function R(o,i){const t=figma.currentPage.selection;if(t.length>0&&o)try{const e=await figma.variables.getVariableByIdAsync(o);if(!e){figma.notify("Error: Could not obtain the variable.");return}await L(t,e,i)}catch(e){console.error("Error when applying the variable:",e),figma.notify("ðŸš¨ It was not possible to apply the variable.")}else figma.notify("ðŸ˜º Oops! There is nothing selected.")}async function v(o,i){const t=figma.currentPage.selection;if(t.length>0&&o)try{const e=await figma.variables.getVariableByIdAsync(o);if(!e){figma.notify("Error: Could not obtain the variable.");return}await A(t,e,i)}catch(e){console.error("Error when applying the variable:",e),figma.notify("ðŸš¨ It was not possible to apply the variable.")}else figma.notify("ðŸ˜º Oops! There is nothing selected.")}figma.ui.onmessage=async o=>{if(o.type==="apply-variable"){const i=o.variableId,t=o.variableType,e=o.action;t==="color"?await R(i,e):t==="number"&&await v(i,e)}else o.type==="reload-variables"&&(await u(),figma.notify("ðŸ”„ Variables reloaded."))};u();
